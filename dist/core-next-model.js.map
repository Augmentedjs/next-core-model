{"version":3,"sources":["webpack://core-next-model/webpack/universalModuleDefinition","webpack://core-next-model/webpack/bootstrap","webpack://core-next-model/external {\"commonjs\":\"lodash.clone\",\"commonjs2\":\"lodash.clone\",\"amd\":\"lodash.clone\",\"root\":\"lodash.clone\"}","webpack://core-next-model/./src/model/abstractModel.js","webpack://core-next-model/external {\"commonjs\":\"next-core-object\",\"commonjs2\":\"next-core-object\",\"amd\":\"next-core-object\",\"root\":\"next-core-object\"}","webpack://core-next-model/external {\"commonjs\":\"next-core-utilities\",\"commonjs2\":\"next-core-utilities\",\"amd\":\"next-core-utilities\",\"root\":\"next-core-utilities\"}","webpack://core-next-model/external {\"commonjs\":\"next-core-validation\",\"commonjs2\":\"next-core-validation\",\"amd\":\"next-core-validation\",\"root\":\"next-core-validation\"}","webpack://core-next-model/./src/collection/iterator.js","webpack://core-next-model/./src/index.js","webpack://core-next-model/external {\"commonjs\":\"lodash.result\",\"commonjs2\":\"lodash.result\",\"amd\":\"lodash.result\",\"root\":\"lodash.result\"}","webpack://core-next-model/external {\"commonjs\":\"lodash.isempty\",\"commonjs2\":\"lodash.isempty\",\"amd\":\"lodash.isempty\",\"root\":\"lodash.isempty\"}","webpack://core-next-model/external {\"commonjs\":\"lodash.has\",\"commonjs2\":\"lodash.has\",\"amd\":\"lodash.has\",\"root\":\"lodash.has\"}","webpack://core-next-model/external {\"commonjs\":\"lodash.defaults\",\"commonjs2\":\"lodash.defaults\",\"amd\":\"lodash.defaults\",\"root\":\"lodash.defaults\"}","webpack://core-next-model/external {\"commonjs\":\"lodash.iteratee\",\"commonjs2\":\"lodash.iteratee\",\"amd\":\"lodash.iteratee\",\"root\":\"lodash.iteratee\"}","webpack://core-next-model/external {\"commonjs\":\"lodash.defer\",\"commonjs2\":\"lodash.defer\",\"amd\":\"lodash.defer\",\"root\":\"lodash.defer\"}","webpack://core-next-model/external {\"commonjs\":\"lodash.escape\",\"commonjs2\":\"lodash.escape\",\"amd\":\"lodash.escape\",\"root\":\"lodash.escape\"}","webpack://core-next-model/./src/collection/collection.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__8__","__WEBPACK_EXTERNAL_MODULE__9__","__WEBPACK_EXTERNAL_MODULE__10__","__WEBPACK_EXTERNAL_MODULE__11__","__WEBPACK_EXTERNAL_MODULE__12__","__WEBPACK_EXTERNAL_MODULE__13__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_clone","_result","_isEmpty","_has","_isEqual","_defaults","_iteratee","_defer","_escape","wrapError","model","options","error","resp","context","trigger","AugmentedObject","constructor","attributes","args","attrs","super","id","idAttribute","cidPrefix","defaults","validationError","urlRoot","_pending","_changing","_previousAttributes","_attributes","schema","validationMessages","valid","preinitialize","cid","uniqueId","collection","parse","extend","set","changed","initialize","attribute","val","_validate","console","warn","unset","silent","changes","changing","current","prev","attr","push","length","escape","has","matches","clear","toJSON","fetch","success","serverAttrs","sync","save","wait","validate","method","isNew","patch","request","destroy","stopListening","url","base","urlError","replace","encodeURIComponent","keys","values","clone","hasChanged","changedAttributes","diff","old","previous","previousAttributes","supportsValidation","isValid","_validationFramework","ValidationFramework","v","getValidationMessages","messages","errors","message","dataPath","reset","data","isEmpty","toString","JSON","stringify","update","ITERATOR_VALUES","ITERATOR_KEYS","kind","_collection","_kind","_index","next","at","modelId","done","AbstractModel","AbstractCollection","CollectionIterator","findModelByMatchingProperties","properties","filter","entry","every","setOptions","add","remove","merge","addOptions","models","_byId","comparator","_reset","out","singular","Array","isArray","slice","removed","_removeModels","added","merged","_isModel","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","isString","existing","_prepareModel","_addReference","orderChanged","some","index","splice","_removeReference","previousModels","pop","unshift","shift","obj","find","results","where","first","findWhere","Error","isFunction","sortBy","pluck","callbackOpts","entries","ITERATOR_KEYSVALUES","a","sortByKey","sorted","sortObjects","size","ret","e","on","_onModelEvent","off","event","prevId","apply","arguments"],"mappings":"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","file":"core-next-model.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash.clone\"), require(\"next-core-object\"), require(\"next-core-utilities\"), require(\"next-core-validation\"), require(\"lodash.result\"), require(\"lodash.isempty\"), require(\"lodash.has\"), require(\"lodash.defaults\"), require(\"lodash.iteratee\"), require(\"lodash.defer\"), require(\"lodash.escape\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"core-next-model\", [\"lodash.clone\", \"next-core-object\", \"next-core-utilities\", \"next-core-validation\", \"lodash.result\", \"lodash.isempty\", \"lodash.has\", \"lodash.defaults\", \"lodash.iteratee\", \"lodash.defer\", \"lodash.escape\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core-next-model\"] = factory(require(\"lodash.clone\"), require(\"next-core-object\"), require(\"next-core-utilities\"), require(\"next-core-validation\"), require(\"lodash.result\"), require(\"lodash.isempty\"), require(\"lodash.has\"), require(\"lodash.defaults\"), require(\"lodash.iteratee\"), require(\"lodash.defer\"), require(\"lodash.escape\"));\n\telse\n\t\troot[\"core-next-model\"] = factory(root[\"lodash.clone\"], root[\"next-core-object\"], root[\"next-core-utilities\"], root[\"next-core-validation\"], root[\"lodash.result\"], root[\"lodash.isempty\"], root[\"lodash.has\"], root[\"lodash.defaults\"], root[\"lodash.iteratee\"], root[\"lodash.defer\"], root[\"lodash.escape\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__4__, __WEBPACK_EXTERNAL_MODULE__7__, __WEBPACK_EXTERNAL_MODULE__8__, __WEBPACK_EXTERNAL_MODULE__9__, __WEBPACK_EXTERNAL_MODULE__10__, __WEBPACK_EXTERNAL_MODULE__11__, __WEBPACK_EXTERNAL_MODULE__12__, __WEBPACK_EXTERNAL_MODULE__13__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { AugmentedObject } from \"next-core-object\";\nimport { extend, uniqueId, allKeys } from \"next-core-utilities\";\nimport { ValidationFramework } from \"next-core-validation\";\n\n// for now\nconst _clone = require(\"lodash.clone\");\nconst _result = require(\"lodash.result\");\nconst _isEmpty = require(\"lodash.isempty\");\nconst _has = require(\"lodash.has\");\nconst _isEqual = require(\"lodash.isequal\");\nconst _defaults = require(\"lodash.defaults\");\nconst _iteratee = require(\"lodash.iteratee\");\nconst _defer = require(\"lodash.defer\");\nconst _escape = require(\"lodash.escape\");\n\nconst wrapError = (model, options) => {\n  if (model) {\n    const error = options.error;\n    options.error = (resp) => {\n      if (error) {\n        error.call(options.context, model, resp, options);\n      }\n      model.trigger(\"error\", model, resp, options);\n    };\n  }\n};\n\n/**\n * AbstractModel <br/>\n * Supports: <ul>\n * <li>Validation and Schemas</li>\n * <li>Security</li>\n * </ul>\n * @extends AugmentedObject\n */\nclass AbstractModel extends AugmentedObject {\n  constructor(attributes, options, ...args) {\n    super(options);\n    this.id = 0;\n    this.idAttribute = \"id\"; // ????\n    this.cidPrefix = \"c\";\n    this.defaults = {};\n    this.validationError = null;\n    this.urlRoot = \"\";\n    this._pending = false;\n    this._changing = false;\n    this._previousAttributes = null;\n    this._attributes = (attributes) ? attributes : {};\n    if (!options) {\n      options = {};\n    }\n\n    this.schema = null;\n    this.validationMessages = {\n     valid: true\n    };\n\n    if (options && options.schema) {\n      this.schema = options.schema;\n    }\n\n    this.preinitialize(args);\n    this.cid = uniqueId(this.cidPrefix);\n    if (options && options.collection) {\n      this.collection = options.collection;\n    }\n    let attrs;\n    if (options && options.parse) {\n      attrs = this.parse(attrs, options) || {};\n    }\n\n    this.defaults = _result(this, \"defaults\");\n    attrs = _defaults(extend({}, this.defaults, attrs), this.defaults);\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize(args);\n  };\n\n  /**\n   * Schema property\n   * @property {object} schema The JSON schema from this model\n   */\n\n  /**\n   * Validation Message property\n   * @property {object} validationMessages The property holding validation message data\n   */\n\n\n  preinitialize(...args) {\n  };\n\n  initialize(...args) {\n  };\n\n  /** Get the attribute form the Model\n   * @returns {any} The model attribute\n   */\n  get(attribute) {\n    return this._attributes[attribute];\n  };\n\n  /** Set a hash of model attributes on the object, firing `\"change\"`. This is\n   * the core primitive operation of a model, updating the data and notifying\n   * anyone who needs to know about the change in state.\n   */\n  set(key, val, options) {\n    // need stack trace for this:\n    /*try {\n      throw new Error(\"calling set.\");\n    } catch(e) {\n      console.debug(e);\n    }*/\n\n    if (key === null) {\n      return this;\n    }\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    let attrs;\n    if (typeof key === \"object\") {\n      attrs = key;\n      options = val;\n      //console.debug(\"key is an object\", attrs);\n    } else {\n      (attrs = {})[key] = val;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    //console.debug(\"model change attrs\", attrs);\n\n    // Run validation.\n    if (!this._validate(attrs, options)) {\n      console.warn(\"Model did not validate\");\n      return false;\n    }\n\n    // Extract attributes and options.\n    const unset      = options.unset;\n    const silent     = options.silent;\n    const changes    = [];\n    let changing   = this._changing;\n    this._changing = true;\n\n    if (!changing) {\n      this._previousAttributes = _clone(this._attributes);\n      this.changed = {};\n    }\n\n    let current = this._attributes;\n    let changed = this.changed;\n    const prev    = this._previousAttributes;\n\n    let attr;\n    // For each `set` attribute, update or delete the current value.\n    for (attr in attrs) {\n      //console.debug(\"attr to set\", attr);\n      val = attrs[attr];\n      //console.debug(\"attr value set\", attrs[attr]);\n      //console.debug(\"current[attr], val\", current[attr], val);\n      if ( (typeof current[attr] === \"string\") && (typeof val === \"string\") && current[attr] !== val ) {\n        changes.push(attr);\n      } else if (!_isEqual(current[attr], val)) {\n        //console.debug(\"notequal current[attr], val\", current[attr], val);\n        changes.push(attr);\n      }\n      //console.debug(\"prev[attr], val\", prev[attr], val);\n      if ( (typeof prev[attr] === \"string\") && (typeof val === \"string\") && prev[attr] !== val ) {\n        changed[attr] = val;\n      } else if (!_isEqual(prev[attr], val)) {\n        //console.debug(\"assign changed[attr]\", val);\n        changed[attr] = val;\n      } else {\n        //console.debug(\"deleted changed[attr]\");\n        delete changed[attr];\n      }\n      if (unset) {\n        //console.debug(\"unset deleted current[attr]\");\n        delete current[attr];\n      } else{\n        //console.debug(\"assign current[attr]\", val);\n        current[attr] = val;\n      }\n    }\n\n    // Update the `id`.\n    if (this.idAttribute in attrs) {\n      this.id = this.get(this.idAttribute);\n    }\n\n    // Trigger all relevant attribute changes.\n    if (!silent) {\n      //console.debug(\"model set: not silent\");\n      //console.debug(\"model changes to act on\", changes);\n      if (changes.length) {\n        this._pending = options;\n      }\n      let i = 0;\n      for (i = 0; i < changes.length; i++) {\n        this.trigger(\"change:\" + changes[i], this, current[changes[i]], options);\n      }\n    }\n\n    // You might be wondering why there's a `while` loop here. Changes can\n    // be recursively nested within `\"change\"` events.\n    if (changing) {\n      return this;\n    }\n    if (!silent) {\n      while (this._pending) {\n        options = this._pending;\n        this._pending = false;\n        this.trigger(\"change\", this, options);\n      }\n    }\n    this._pending = false;\n    this._changing = false;\n    return this;\n  };\n\n  /** Escape the attribute data\n   */\n  escape(attribute) {\n    return _escape(this.get(attr));\n  };\n\n  /** Has an attribute in the Model\n   * @returns {bolean} Returns true if exists\n   */\n  has(attribute) {\n    return this.get(attr) !== null;\n  };\n\n  /** Special-cased proxy to underscore's `matches` method.\n   */\n  matches(attrs) {\n    return !!_iteratee(attrs, this)(this._attributes);\n  };\n\n  /** Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n   * if the attribute doesn't exist.\n   */\n  unset(attr, options) {\n    return this.set(attr, void 0, extend({}, options, {unset: true}));\n  };\n\n  /** Clear all attributes on the model, firing `\"change\"`.\n   */\n  clear(options) {\n    let attrs = {};\n    for (let key in this._attributes) attrs[key] = void 0;\n    return this.set(attrs, extend({}, options, {unset: true}));\n  };\n\n  /**\n   * Transforms model to pure toJSON\n   */\n  toJSON() {\n    return _clone(this._attributes);\n  };\n\n  //– sync x\n\n  /** Fetch the model from the server, merging the response with the model's\n   * local attributes. Any changed attributes will trigger a \"change\" event.\n   */\n  fetch(options) {\n    options = extend({parse: true}, options);\n    let model = this;\n    let success = options.success;\n    options.success = (resp) => {\n      let serverAttrs = options.parse ? model.parse(resp, options) : resp;\n      if (!model.set(serverAttrs, options)) {\n        return false;\n      }\n      if (success) {\n        success.call(options.context, model, resp, options);\n      }\n      model.trigger(\"sync\", model, resp, options);\n    };\n    wrapError(this, options);\n    return this.sync(\"read\", this, options);\n  };\n\n  /** Set a hash of model attributes, and sync the model to the server.\n   * If the server returns an attributes hash that differs, the model's\n   * state will be `set` again.\n   */\n  save(key, val, options) {\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    let attrs;\n    if (key == null || typeof key === \"object\") {\n      attrs = key;\n      options = val;\n    } else {\n      (attrs = {})[key] = val;\n    }\n\n    options = extend({validate: true, parse: true}, options);\n    let wait = options.wait;\n\n    // If we're not waiting and attributes exist, save acts as\n    // `set(attr).save(null, opts)` with validation. Otherwise, check if\n    // the model will be valid when the attributes, if any, are set.\n    if (attrs && !wait) {\n      if (!this.set(attrs, options)) {\n        return false;\n      }\n    } else if (!this._validate(attrs, options)) {\n      return false;\n    }\n\n    // After a successful server-side save, the client is (optionally)\n    // updated with the server-side state.\n    let model = this;\n    let success = options.success;\n    let attributes = this._attributes;\n    options.success = (resp) => {\n      // Ensure attributes are restored during synchronous saves.\n      model.attributes = attributes;\n      let serverAttrs = options.parse ? model.parse(resp, options) : resp;\n      if (wait) {\n        serverAttrs = extend({}, attrs, serverAttrs);\n      }\n      if (serverAttrs && !model.set(serverAttrs, options)) {\n        return false;\n      }\n      if (success) {\n        success.call(options.context, model, resp, options);\n      }\n      model.trigger(\"sync\", model, resp, options);\n    };\n    wrapError(this, options);\n\n    // Set temporary attributes if `{wait: true}` to properly find new ids.\n    if (attrs && wait) {\n      this._attributes = extend({}, attributes, attrs);\n    }\n\n    let method = this.isNew() ? \"create\" : (options.patch ? \"patch\" : \"update\");\n    if (method === \"patch\" && !options.attrs) {\n      options.attrs = attrs;\n    }\n    let request = this.sync(method, this, options);\n\n    // Restore attributes.\n    this._attributes = attributes;\n\n    return request;\n  };\n\n  /** Destroy this model on the server if it was already persisted.\n   * Optimistically removes the model from its collection, if it has one.\n   * If `wait: true` is passed, waits for the server to respond before removal.\n   */\n  destroy(options) {\n    options = options ? _clone(options) : {};\n    let model = this;\n    let success = options.success;\n    let wait = options.wait;\n\n    let destroy = () => {\n      model.stopListening();\n      model.trigger(\"destroy\", model, model.collection, options);\n    };\n\n    options.success = (resp) => {\n      if (wait) {\n        destroy();\n      }\n      if (success) {\n        success.call(options.context, model, resp, options);\n      }\n      if (!model.isNew()) {\n        model.trigger(\"sync\", model, resp, options);\n      }\n    };\n\n    let request = false;\n    if (this.isNew()) {\n      _defer(options.success);\n    } else {\n      wrapError(this, options);\n      request = this.sync(\"delete\", this, options);\n    }\n    if (!wait) destroy();\n    return request;\n  };\n\n  /** Default URL for the model's representation on the server -- if you're\n   * using restful methods, override this to change the endpoint\n   * that will be called.\n   */\n  url() {\n    let base =\n      _result(this, \"urlRoot\") ||\n      _result(this.collection, \"url\") ||\n      urlError();\n    if (this.isNew()) {\n      return base;\n    }\n    let id = this.get(this.idAttribute);\n    return base.replace(/[^\\/]$/, \"$&/\") + encodeURIComponent(id);\n  };\n\n  /**\n   * Keys of the attributes in this Model\n   */\n  keys() {\n    return Object.keys(this._attributes);\n  };\n\n  /**\n   * Values of the attributes in this Model\n   */\n  values() {\n    return Object.values(this._attributes);\n  };\n\n  /* if needed these can be used from lodash or underscore against the model's attributes\n  pairs() { // ??\n  };\n\n  invert() { // ??\n  };\n\n  pick() { // ??\n  };\n\n  omit() { // ??\n  };\n\n  chain() { // ??\n  };\n  */\n\n  /** Converts a response into the hash of attributes to be `set` on\n   * the model. The default implementation is just to pass the response along.\n   */\n  parse(resp, options) {\n    return resp;\n  };\n\n  /** Create a new model with identical attributes to this one.\n   */\n  clone() {\n    return new this.constructor(this._attributes);\n  };\n\n  /** A model is new if it has never been saved to the server, and lacks an id.\n   */\n  isNew() {\n    return !this.has(this.idAttribute);\n  };\n\n  /** Determine if the model has changed since the last `\"change\"` event.\n   * If you specify an attribute name, determine if that attribute has changed.\n   */\n  hasChanged(attr) {\n   if (attr == null) {\n     return !_isEmpty(this.changed);\n   }\n   return _has(this.changed, attr);\n  };\n\n  /** Return an object containing all the attributes that have changed, or\n   * false if there are no changed attributes. Useful for determining what\n   * parts of a view need to be updated and/or what attributes need to be\n   * persisted to the server. Unset attributes will be set to undefined.\n   * You can also pass an attributes object to diff against the model,\n   * determining if there *would be* a change.\n   */\n  changedAttributes(diff) {\n    if (!diff) {\n      return this.hasChanged() ? _clone(this.changed) : false;\n    }\n    let old = this._changing ? this._previousAttributes : this._attributes;\n    let changed = {};\n    let hasChanged;\n    for (let attr in diff) {\n      let val = diff[attr];\n      if (_isEqual(old[attr], val)) {\n        continue;\n      }\n      changed[attr] = val;\n      hasChanged = true;\n    }\n    return hasChanged ? changed : false;\n  };\n\n  /** Get the previous value of an attribute, recorded at the time the last\n   * `\"change\"` event was fired.\n   */\n  previous(attr) {\n    if (attr == null || !this._previousAttributes) {\n      return null;\n    }\n    return this._previousAttributes[attr];\n  };\n\n  /** Get all of the attributes of the model at the time of the previous\n   * `\"change\"` event.\n   */\n  previousAttributes() {\n    return _clone(this._previousAttributes);\n  };\n\n  /**\n   * supportsValidation - Returns True if this model supports validation\n   * @returns {boolean} Returns True if this model supports validation\n   */\n  supportsValidation() {\n    if (this.schema !== null) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * isValid - Returns True if this model is valid\n   * Runs two level validation, attribute-level then JSON Schema\n   * @returns {boolean} Returns True if this model is valid\n   */\n  isValid(options) {\n    const valid = this._validate({}, extend({}, options, {validate: true}));\n    if (valid) {\n      const messages = this.validate();\n      return this.validationMessages.valid;\n    }\n    return valid;\n  };\n  /**\n   * Validates the model\n   * @returns {array} Returns array of messages from validation\n   */\n  validate() {\n    if (!this._validationFramework) {\n      this._validationFramework = new ValidationFramework();\n    }\n    const v = this._validationFramework;\n\n    if (this.supportsValidation() && v.supportsValidation()) {\n      // validate from Validator\n      this.validationMessages = v.validate(this.toJSON(), this.schema);\n    } else {\n      this.validationMessages.valid = true;\n    }\n    return this.validationMessages;\n  };\n  /**\n   * Gets the validation messages only in an array\n   * @returns {array} Returns array of messages from validation\n   */\n  getValidationMessages() {\n    const messages = [];\n    if (this.validationMessages && this.validationMessages.errors) {\n      const l = this.validationMessages.errors.length;\n      var i = 0;\n      for (i = 0; i < l; i++) {\n        messages.push(this.validationMessages.errors[i].message + \" from \" + this.validationMessages.errors[i].dataPath);\n      }\n    }\n    return messages;\n  };\n  /**\n   * Sync model data to bound REST call\n   */\n  sync(method, model, options) {\n  };\n  /**\n   * reset - clear and rewrite the model with passed data\n   * @param {object} data The data to replace the model with (optional)\n   */\n  reset(data) {\n    this.clear();\n    if (data) {\n      this.set(data);\n    }\n  };\n\n  /**\n   * isEmpty - returns true is the model is empty\n   * @returns {boolean} returns true is the model is empty\n   */\n  isEmpty() {\n    return ( (this._attributes) ? (Object.keys(this._attributes).length === 0) : true );\n  };\n\n  /**\n   * toString - returns the model data as a string\n   * @returns {string} returns the model data as a string\n   */\n  toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\n  /**\n   * fetch - Fetches the model as a 'get'\n   */\n  fetch(options) {\n    this.sync(\"read\", this, options);\n  };\n  /**\n   * save - Saves the model as a 'create'\n   */\n  save(options) {\n    this.sync(\"create\", this, options);\n  };\n  /**\n   * update - Updates the model as a 'update'\n   */\n  update(options) {\n    this.sync(\"update\", this, options);\n  };\n  /**\n   * destroy - Deletes the model as a 'delete'\n   */\n  destroy(options) {\n    this.sync(\"delete\", this, options);\n  };\n\n  /** Run validation against the next complete set of model attributes,\n   * returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n   * @private\n   */\n  _validate(attrs, options) {\n    if (options && (!options.validate || !this.validate)) {\n      return true;\n    }\n    const messages = this.validate();\n    //attrs = extend({}, this._attributes, attrs);\n    //const error = this.validationError = this.validate(attrs, options);\n    //console.log(`Validate error ${JSON.stringify(error)}`);\n    //if (!error.valid) {\n    //  return true;\n    //}\n    if (messages.valid) {\n      return true;\n    }\n    this.trigger(\"invalid\", this, messages, extend(options, {validationError: messages}));\n    return false;\n  };\n};\n\nexport default AbstractModel;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","// CollectionIterator\n// ------------------\n\n// This \"enum\" defines the three possible kinds of values which can be emitted\n// by a CollectionIterator that correspond to the values(), keys() and entries()\n// methods on Collection, respectively.\nconst ITERATOR_VALUES = 1;\nconst ITERATOR_KEYS = 2;\nconst ITERATOR_KEYSVALUES = 3;\n\n/** A CollectionIterator implements JavaScript's Iterator protocol, allowing the\n * use of `for of` loops in modern browsers and interoperation between\n * Collection and other JavaScript functions and third-party libraries\n * which can operate on Iterables.\n */\nclass CollectionIterator {\n  constructor(collection, kind) {\n    this._collection = collection;\n    this._kind = kind;\n    this._index = 0;\n  };\n\n  // All Iterators should themselves be Iterable.\n  /* ???\n  if ($$iterator) {\n    CollectionIterator.prototype[$$iterator] = function() {\n      return this;\n    };\n  }*/\n\n  /**\n   * Next model in collection<br/>\n   * Once exhausted, remove the reference to the collection so future\n   * calls to the next method always return done.\n   */\n  next() {\n    if (this._collection) {\n      // Only continue iterating if the iterated collection is long enough.\n      if (this._index < this._collection.length) {\n        const model = this._collection.at(this._index);\n        this._index++;\n\n        // Construct a value depending on what kind of values should be iterated.\n        let value;\n        if (this._kind === ITERATOR_VALUES) {\n          value = model;\n        } else {\n          const id = this._collection.modelId(model.attributes);\n          if (this._kind === ITERATOR_KEYS) {\n            value = id;\n          } else { // ITERATOR_KEYSVALUES\n            value = [id, model];\n          }\n        }\n        return {value: value, done: false};\n      }\n\n      // Once exhausted, remove the reference to the collection so future\n      // calls to the next method always return done.\n      this._collection = void 0;\n    }\n    return {value: void 0, done: true};\n  };\n};\n\nexport default CollectionIterator;\n","import AbstractModel from \"./model/abstractModel.js\";\nimport AbstractCollection from \"./collection/collection.js\";\nimport CollectionIterator from \"./collection/iterator.js\";\n\nmodule.exports.AbstractModel = AbstractModel;\nmodule.exports.AbstractCollection = AbstractCollection;\nmodule.exports.CollectionIterator = CollectionIterator;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;","module.exports = __WEBPACK_EXTERNAL_MODULE__9__;","module.exports = __WEBPACK_EXTERNAL_MODULE__10__;","module.exports = __WEBPACK_EXTERNAL_MODULE__11__;","module.exports = __WEBPACK_EXTERNAL_MODULE__12__;","module.exports = __WEBPACK_EXTERNAL_MODULE__13__;","import { AugmentedObject } from \"next-core-object\";\nimport { extend, uniqueId, isString, isFunction, some, splice, sortObjects } from \"next-core-utilities\";\nimport AbstractModel from \"../model/abstractModel.js\";\nimport { ValidationFramework } from \"next-core-validation\";\nimport CollectionIterator from \"./iterator.js\";\n\nconst findModelByMatchingProperties = (set, properties) => {\n  return set.filter( (entry) => {\n    return Object.keys(properties).every( (key) => {\n      return entry._attributes[key] === properties[key];\n    });\n  });\n};\n\nconst _clone = require(\"lodash.clone\");\n\n// Default options for `Collection#set`.\nconst setOptions = {\n  add: true,\n  remove: true,\n  merge: true\n};\n\nconst addOptions = {\n  add: true,\n  remove: false\n};\n\n/**\n * Abstract Augmented Collection <br/>\n * Supports: <ul>\n * <li>Validation and Schemas</li>\n * <li>Security</li>\n * </ul>\n * @extends Object\n */\nclass AbstractCollection extends AugmentedObject {\n  constructor(models, options) {\n    super(options);\n\n    this.length = 0;\n    this.models = [];\n    this._byId = {};\n    this.schema = null;\n    this.validationMessages = {\n      valid: true\n    };\n\n    if (!options) {\n      options = {};\n    }\n    this.preinitialize(models, options);\n    if (options.model) {\n      this.model = options.model;\n    }\n    if (options.comparator !== void 0) {\n      this.comparator = options.comparator;\n    }\n    this._reset();\n    this.initialize(models, options);\n    if (models) {\n      // used to use reset but this collection never existed\n      this.add(models, extend({silent: true}, options));\n    }\n    if (!this.model) {\n      this.model = new AbstractModel();\n    }\n  };\n\n  /**\n   * Schema property\n   * @property {object} schema The JSON schema from this collection\n   */\n\n  /**\n   * Validation Message property\n   * @property {object} validationMessages The property holding validation message data\n   */\n\n  preinitialize(models, options) {\n  };\n\n  initialize(models, options) {\n  };\n\n  /** The JSON representation of a Collection is an array of the\n   * models\" attributes.\n   */\n  toJSON() {\n    //return this.map( (model) => { return model.toJSON(options); });\n    let i = 0;\n    const out = [], l = this.models.length;\n    for (i = 0; i < l; i++) {\n      out[i] = this.models[i].toJSON();\n    }\n    return out;\n  };\n\n  /*map(collection, interatee) {\n    return _map(collection, interatee);\n  };*/\n\n  /**\n   * Add a model, or list of models to the set. `models` may be\n   * Models or raw JavaScript objects to be converted to Models, or any\n   * combination of the two.\n   */\n  add(models, options) {\n    return this.set(models, extend({ merge: false }, options, addOptions));\n  };\n\n  /** Remove a model, or a list of models from the set.\n  */\n  remove(models, options) {\n    options = extend({}, options);\n    const singular = Array.isArray(models);\n    models = singular ? [models] : models.slice();\n    let removed = this._removeModels(models, options);\n    if (!options.silent && removed.length) {\n      options.changes = {added: [], merged: [], removed: removed};\n      this.trigger(\"update\", this, options);\n    }\n    return singular ? removed[0] : removed;\n  };\n\n  /** Update a collection by `set`-ing a new list of models, adding new ones,\n   * removing models that are no longer present, and merging models that\n   * already exist in the collection, as necessary. Similar to **Model#set**,\n   * the core operation for updating the data contained by the collection.\n   */\n  set(models, options) {\n    if (models === null) {\n      return;\n    }\n\n    options = extend({}, setOptions, options);\n    if (options.parse && !this._isModel(models)) {\n      models = this.parse(models, options) || [];\n    }\n\n    //console.debug(\"collection.add: models\", models);\n\n    let singular = !Array.isArray(models);\n    models = singular ? [models] : models.slice();\n\n    //console.debug(\"collection.add: singular\", singular);\n\n    let at = options.at;\n    if (at != null) at = +at;\n    if (at > this.length) at = this.length;\n    if (at < 0) at += this.length + 1;\n\n    let set = [];\n    let toAdd = [];\n    let toMerge = [];\n    let toRemove = [];\n    let modelMap = {};\n\n    let add = options.add;\n    let merge = options.merge;\n    let remove = options.remove;\n\n    //console.debug(\"collection.add: options add\", add);\n    //console.debug(\"collection.add: options merge\", merge);\n    //console.debug(\"collection.add: options remove\", remove);\n\n    let sort = false;\n    let sortable = this.comparator && at == null && options.sort !== false;\n    let sortAttr = isString(this.comparator) ? this.comparator : null;\n\n    // Turn bare objects into model references, and prevent invalid models\n    // from being added.\n    let model, i;\n    const l = models.length;\n\n    //console.debug(\"collection.add: num models\", l);\n\n    for (i = 0; i < l; i++) {\n      model = models[i];\n\n      //console.debug(\"collection.add: model\", i, model);\n\n      // If a duplicate is found, prevent it from being added and\n      // optionally merge it into the existing model.\n      let existing = this.get(model);\n\n      //console.debug(\"collection.add: existing\", i, existing);\n      if (existing) {\n        if (merge && model !== existing) {\n          let attrs = this._isModel(model) ? model._attributes : model;\n          if (options.parse) attrs = existing.parse(attrs, options);\n          existing.set(attrs, options);\n          toMerge.push(existing);\n          if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n        }\n        if (!modelMap[existing.cid]) {\n          modelMap[existing.cid] = true;\n          set.push(existing);\n        }\n        models[i] = existing;\n\n      // If this is a new, valid model, push it to the `toAdd` list.\n      } else if (add) {\n        model = models[i] = this._prepareModel(model, options);\n\n        //console.debug(\"collection.add: add model\", i, model);\n\n        if (model) {\n          toAdd.push(model);\n          this._addReference(model, options);\n          modelMap[model.cid] = true;\n          set.push(model);\n        }\n      }\n    }\n\n    //console.debug(\"collection.add: set models\", set);\n    //console.debug(\"collection.add: toAdd models\", toAdd);\n    //console.debug(\"collection.add: toMerge models\", toMerge);\n\n    // Remove stale models.\n    if (remove) {\n      for (i = 0; i < this.length; i++) {\n        model = this.models[i];\n        if (!modelMap[model.cid]) toRemove.push(model);\n      }\n      if (toRemove.length) this._removeModels(toRemove, options);\n    }\n\n    // See if sorting is needed, update `length` and splice in new models.\n    let orderChanged = false;\n    let replace = !sortable && add && remove;\n    if (set.length && replace) {\n      orderChanged = this.length !== set.length || some(this.models, (m, index) => {\n        return m !== set[index];\n      });\n      this.models.length = 0;\n      splice(this.models, set, 0);\n      this.length = this.models.length;\n    } else if (toAdd.length) {\n      if (sortable) {\n        sort = true;\n      }\n      splice(this.models, toAdd, at == null ? this.length : at);\n      this.length = this.models.length;\n    }\n\n    // Silently sort the collection if appropriate.\n    if (sort) this.sort({silent: true});\n\n    // Unless silenced, it\"s time to fire all appropriate add/sort/update events.\n    if (!options.silent) {\n      for (i = 0; i < toAdd.length; i++) {\n        if (at != null) options.index = at + i;\n        model = toAdd[i];\n        model.trigger(\"add\", model, this, options);\n      }\n      if (sort || orderChanged) this.trigger(\"sort\", this, options);\n      if (toAdd.length || toRemove.length || toMerge.length) {\n        options.changes = {\n          added: toAdd,\n          removed: toRemove,\n          merged: toMerge\n        };\n        this.trigger(\"update\", this, options);\n      }\n    }\n\n    //console.debug(\"collection.add: finished models\", this.toJSON());\n\n    // Return the added (or merged) model (or models).\n    return singular ? models[0] : models;\n  };\n\n  /** When you have more items than you want to add or remove individually,\n   * you can reset the entire set with a new list of models, without firing\n   * any granular `add` or `remove` events. Fires `reset` when finished.\n   * Useful for bulk operations and optimizations.\n   */\n  reset(models, options) {\n    options = options ? _clone(options) : {};\n    for (let i = 0; i < this.models.length; i++) {\n      this._removeReference(this.models[i], options);\n    }\n    options.previousModels = this.models;\n    this._reset();\n    models = this.add(models, extend({silent: true}, options));\n    if (!options.silent) this.trigger(\"reset\", this, options);\n    return models;\n  };\n\n  /** Add a model to the end of the collection.\n  */\n  push(model, options) {\n    return this.add(model, extend({at: this.length}, options));\n  };\n\n  /** Remove a model from the end of the collection.\n   */\n  pop(options) {\n    const model = this.at(this.length - 1);\n    return this.remove(model, options);\n  };\n\n  /** Add a model to the beginning of the collection.\n   */\n  unshift(model, options) {\n    return this.add(model, extend({at: 0}, options));\n  };\n\n  /** Remove a model from the beginning of the collection.\n   */\n  shift(options) {\n    const model = this.at(0);\n    return this.remove(model, options);\n  };\n\n  /** Slice out a sub-array of models from the collection.\n   */\n  slice(...args) {\n    return this.models.slice(args);\n  };\n\n  /** Get a model from the set by id, cid, model object with id or cid\n   * properties, or an attributes object that is transformed through modelId.\n   */\n  get(obj) {\n    //console.debug(\"get\", obj);\n\n    if (obj == null) {\n      return void 0;\n    }\n\n    /*console.debug(\"_byId\", (this._byId[obj] ||\n      this._byId[this.modelId(this._isModel(obj) ? obj._attributes : obj)] ||\n      obj.cid && this._byId[obj.cid]));*/\n\n    return this._byId[obj] ||\n      this._byId[this.modelId(this._isModel(obj) ? obj._attributes : obj)] ||\n      obj.cid && this._byId[obj.cid];\n  };\n\n  /** Returns `true` if the model is in the collection.\n   */\n  has(obj) {\n    return (this.get(obj) !== null);\n  };\n\n  /** Get the model at the given index.\n   */\n  at(index) {\n    if (index < 0) {\n      index += this.length;\n    }\n    return this.models[index];\n  };\n\n  /** find the model that matches these properties\n   * @param {object} attrs properties to match\n   * @returns {Augmented.AbstractModel} model that matched\n   */\n  find(attrs) {\n    const results = findModelByMatchingProperties(this.models, attrs);\n    if (results && results.length > 0) {\n      return results[0];\n    }\n    return null;\n  };\n\n  /** filter the models that match these properties\n   * @param {object} attrs properties to match\n   * @returns {array} models that matched\n   */\n  filter(attrs) {\n    return findModelByMatchingProperties(this.models, attrs);\n  };\n\n  /** Return models with matching attributes. Useful for simple cases of `filter`.\n    * @param {object} attrs properties to match\n    * @returns {Augmented.AbstractModel|array} models that matched\n   */\n  where(attrs, first) {\n    if (first) {\n      return this.find(attrs);\n    }\n    return this.filter(attrs);\n  };\n\n  /** Return the first model with matching attributes. Useful for simple cases\n   * of `find`.\n   */\n  findWhere(attrs) {\n    return this.where(attrs, true);\n  };\n\n  /** Force the collection to re-sort itself. You don\"t need to call this under\n   * normal circumstances, as the set will maintain sort order as each item\n   * is added.\n   */\n  sort(options) {\n    let comparator = this.comparator;\n    if (!comparator) throw new Error(\"Cannot sort a set without a comparator\");\n    options || (options = {});\n\n    let length = comparator.length;\n    if (isFunction(comparator)) comparator = comparator.bind(this);\n\n    // Run sort based on type of `comparator`.\n    if (length === 1 || isString(comparator)) {\n      this.models = this.sortBy(comparator);\n    } else {\n      this.models.sort(comparator);\n    }\n    if (!options.silent) this.trigger(\"sort\", this, options);\n    return this;\n  };\n\n  /** Pluck an attribute from each model in the collection.\n   */\n  pluck(attr) {\n    let i = 0;\n    const out = [], l = this.models.length;\n    for (i = 0; i < l; i++) {\n      out[i] = this.models[i].toJSON()[attr];\n    }\n    return out;\n    //return this.map(attr + \"\");\n  };\n\n  /**\n   * Fetch the collection\n   */\n  fetch(options) {\n  };\n\n  /** Create a new instance of a model in this collection. Add the model to the\n   * collection immediately, unless `wait: true` is passed, in which case we\n   * wait for the server to agree.\n   */\n  create(model, options) {\n    options = options ? _clone(options) : {};\n    let wait = options.wait;\n    model = this._prepareModel(model, options);\n    if (!model) return false;\n    if (!wait) this.add(model, options);\n    let collection = this;\n    let success = options.success;\n    options.success = (m, resp, callbackOpts) => {\n      if (wait) collection.add(m, callbackOpts);\n      if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\n    };\n    model.save(null, options);\n    return model;\n  };\n\n  /** **parse** converts a response into a list of models to be added to the\n   * collection. The default implementation is just to pass it through.\n   */\n  parse(resp, options) {\n    return resp;\n  };\n\n  /** Create a new collection with an identical list of models as this one.\n   */\n  clone() {\n    return new this.constructor(this.models, {\n      model: this.model,\n      comparator: this.comparator\n    });\n  };\n\n  /** Define how to uniquely identify models in the collection.\n   */\n  modelId(attrs) {\n    if (attrs && this.model && this.model.idAttribute) {\n      return attrs[this.model.idAttribute || \"id\"];\n    } else {\n      return \"id\";\n    }\n  };\n\n  /** Get an iterator of all models in this collection.\n   */\n  values() {\n    return new CollectionIterator(this, ITERATOR_VALUES);\n  };\n\n  /** Get an iterator of all model IDs in this collection.\n   */\n  keys() {\n    return new CollectionIterator(this, ITERATOR_KEYS);\n  };\n\n  /** Get an iterator of all [ID, model] tuples in this collection.\n   */\n  entries() {\n    return new CollectionIterator(this, ITERATOR_KEYSVALUES);\n  };\n\n  /**\n   * supportsValidation - Returns True if this collection supports validation\n   * @returns {boolean} Returns True if this collection supports validation\n   */\n  supportsValidation() {\n    const ret = (this.schema && this.schema !== null && this.schema !== {});\n    return (ret) ? true : false;\n  };\n\n  /**\n   * isValid - Returns True if this collection is valid\n   * @returns {boolean} Returns True if this collection is valid\n   */\n  isValid() {\n    return (this.validationMessages) ? this.validationMessages.valid : true;\n  };\n\n  /**\n   * getValidationMessages - Returns the validation messages\n   * @returns {array} Returns the message is an array of objects.\n   */\n  getValidationMessages() {\n    return (this.validationMessages && this.validationMessages.messages) ? this.validationMessages.messages : [];\n  };\n\n  /**\n   * Validates the collection\n   * @returns {array} Returns array of message from validation\n   */\n  validate() {\n    if (this.supportsValidation()) {\n      // validate from Validator\n      let messages = [];\n      this.validationMessages.messages = messages;\n      this.validationMessages.valid = true;\n      const a = this.toJSON(), l = (a && Array.isArray(a)) ? a.length : 0;\n      let i = 0;\n      if (!this._validationFramework) {\n        this._validationFramework = new ValidationFramework();\n      }\n      const v = this._validationFramework;\n\n      //console.debug(\"AUGMENTED: Collection Validate: Beginning with \" + l + \" models.\");\n      for (i = 0; i < l; i++) {\n        messages[i] = v.validate(a[i], this.schema);\n        if (!messages[i].valid) {\n          this.validationMessages.valid = false;\n        }\n      }\n\n      //logger.debug(\"AUGMENTED: Collection Validate: Completed isValid \" + this.validationMessages.valid);\n    } else {\n      this.validationMessages.valid = true;\n    }\n    return this.validationMessages;\n  };\n\n  /**\n   * Collecion.sync\n   */\n  sync(method, model, options) {\n  };\n\n  /**\n   * Collection.save - Saves the collection as a \"create\"\n   */\n  save(options) {\n    this.sync(\"create\", this, options);\n  };\n\n  /**\n   * Collection.update - Updates the collection as an \"update\"\n   */\n  update(options) {\n    this.sync(\"update\", this, options);\n  };\n\n  /**\n   * Collection.remove - Remove from the collection as a \"delete\"\n   */\n  remove(options) {\n    this.sync(\"delete\", this, options);\n  };\n\n  /**\n   * sortByKey - Sorts the collection by a property key\n   * @param {object} key The key to sort by\n   */\n  sortByKey(key) {\n    if (key) {\n      const data = this.toJSON();\n      if (data) {\n        const sorted = sortObjects(data, key);\n        this.reset(sorted);\n      }\n    }\n  };\n\n  /**\n   * isEmpty - returns true is the collection is empty\n   * @returns {boolean} returns true is the collection is empty\n   */\n  isEmpty() {\n    return (this.length === 0);\n  };\n  /**\n   * Collection.size - returns the size of the collection\n   * @returns {number} returns the size of the collection\n   */\n  size() {\n    return this.length;\n  };\n\n  /**\n   * toString - returns the collection data as a string\n   * @returns {string} returns the collection data as a string\n   */\n  toString() {\n    let ret = {};\n    try {\n      ret = JSON.stringify(this.toJSON());\n    } catch(e) {\n      console.error(e);\n    }\n    return ret;\n  };\n\n  /** Private method to reset all internal state. Called when the collection\n   * is first initialized or reset.\n   * @private\n   */\n  _reset() {\n    this.length = 0;\n    this.models = [];\n    this._byId  = {};\n  };\n\n  // Prepare a hash of attributes (or other model) to be added to this\n  // collection.\n  _prepareModel(attrs, options) {\n    if (this._isModel(attrs)) {\n      if (!attrs.collection) attrs.collection = this;\n      return attrs;\n    }\n    options = options ? _clone(options) : {};\n    options.collection = this;\n    const model = new AbstractModel(attrs, options); // used to be this.model, may be a problem if a custom model is passed.\n    if (!model.validationError) {\n      return model;\n    }\n    this.trigger(\"invalid\", this, model.validationError, options);\n    return false;\n  };\n\n  // Internal method called by both remove and set.\n  _removeModels(models, options) {\n    let removed = [];\n    for (let i = 0; i < models.length; i++) {\n      let model = this.get(models[i]);\n      if (!model) continue;\n\n      let index = this.at(model);\n      this.models.splice(index, 1);\n      this.length--;\n\n      // Remove references before triggering \"remove\" event to prevent an\n      // infinite loop. #3693\n      delete this._byId[model.cid];\n      let id = this.modelId(model._attributes);\n      if (id != null) delete this._byId[id];\n\n      if (!options.silent) {\n        options.index = index;\n        model.trigger(\"remove\", model, this, options);\n      }\n\n      removed.push(model);\n      this._removeReference(model, options);\n    }\n    return removed;\n  };\n\n  // Method for checking whether an object should be considered a model for\n  // the purposes of adding to the collection.\n  _isModel(model) {\n    return model instanceof AbstractModel;\n  };\n\n  // Internal method to create a model's ties to a collection.\n  _addReference(model, options) {\n    this._byId[model.cid] = model;\n    let id = this.modelId(model._attributes);\n    if (id != null) this._byId[id] = model;\n    model.on(\"all\", this._onModelEvent, this);\n  };\n\n  // Internal method to sever a model's ties to a collection.\n  _removeReference(model, options) {\n    delete this._byId[model.cid];\n    let id = this.modelId(model._attributes);\n    if (id != null) delete this._byId[id];\n    if (this === model.collection) delete model.collection;\n    model.off(\"all\", this._onModelEvent, this);\n  };\n\n  // Internal method called every time a model in the set fires an event.\n  // Sets need to update their indexes when models change ids. All other\n  // events simply proxy through. \"add\" and \"remove\" events that originate\n  // in other collections are ignored.\n  _onModelEvent(event, model, collection, options) {\n    if (model) {\n      if ((event === \"add\" || event === \"remove\") && collection !== this) return;\n      if (event === \"destroy\") this.remove(model, options);\n      if (event === \"change\") {\n        let prevId = this.modelId(model.previousAttributes());\n        let id = this.modelId(model._attributes);\n        if (prevId !== id) {\n          if (prevId != null) delete this._byId[prevId];\n          if (id != null) this._byId[id] = model;\n        }\n      }\n    }\n    this.trigger.apply(this, arguments);\n  };\n};\n\nexport default AbstractCollection;\n"],"sourceRoot":""}